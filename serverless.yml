# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: Git-Happy

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10
  memorySize: 1024 # optional, in MB, default is 1024
  timeout: 20 # optional, in seconds, default is 6

#you can overwrite defaults here
  stage: dev
  region: us-west-2

  iamRoleStatements:
  - Effect: Allow
    Action:
      - dynamodb:*
    # Allow function to access all tables in this region 
    Resource: [
      "arn:aws:dynamodb:${self:provider.region}:*:*"
      ]

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  # GithubWebhookHandeler:
  #   handler: handler.GithubWebhookHandeler
  #   events:
  #     - http:
  #         path: webhook
  #         method: post
  #         cors: true
  #         integration: lambda
  #         request:
  #           template:
  #             application/json: "$input.json('$')"
  # OauthRequest:
  #  handler: handler.OauthRequest
  #  events:
  #    - http:
  #        path: Oauth
  #        method: get
  #        cors: true
  #        integration: lambda
  #        response:
  #           statusCodes:
  #             302:
  #               pattern: ''
  #               headers:
  #                 Location: integration.response.body.Location

  # OauthToken:
  #  handler: handler.OauthToken
  #  events:
  #    - http:
  #        path: OauthToken
  #        method: get
  #        cors: true
  #        integration: lambda
  #        response:
  #           statusCodes:
  #             302:
  #               pattern: ''
  #               headers:
  #                 Location: integration.response.body.Location
  AlexaGitHubYeti:
    handler: handler.alexaGitHubYeti
    events:
      - alexaSkill

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
# resources:
#   Resources:
#     ScheduledPostsTable:
#       Type: AWS::DynamoDB::Table
#       Properties:
#         TableName: PRequisite
#         AttributeDefinitions:
#           - AttributeName: pull_request_ID
#             AttributeType: N
#           - AttributeName: number
#             AttributeType: N
#         KeySchema:
#           - AttributeName: pull_request_ID
#             KeyType: HASH
#           - AttributeName: number
#             KeyType: RANGE
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1

